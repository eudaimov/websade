name: Deploy web app to Azure Static Web Apps

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [ "main" ]

# Environment variables available to all jobs and steps in this workflow
env:
  APP_LOCATION: "/" # La raíz de tu repositorio es donde está tu código Angular.
  API_LOCATION: "" # Deja vacío si no tienes una API de Azure Functions. Si la tienes, pon "api" o la ruta correcta.
  APP_ARTIFACT_LOCATION: "dist/grupo-sade" # ¡IMPORTANTE! Ajusta esto. Angular suele compilar en 'dist/nombre-de-tu-proyecto'.
  AZURE_STATIC_WEB_APPS_API_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }} # Secreto con el token de despliegue.

permissions:
  contents: read

jobs:
  build_and_deploy_job:
    permissions:
      contents: read # for actions/checkout to fetch code
      pull-requests: write # for Azure/static-web-apps-deploy to comment on PRs
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      # --- NUEVO PASO: Configurar la versión de Node.js ---
      # Esto es crucial para que Angular CLI encuentre la versión de Node.js que necesita.
      - name: Set up Node.js for Angular build
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # Puedes usar '20.x' o '22.x' según la versión exacta de Angular que uses.
                               # El error indicaba '^20.19.0 || ^22.12.0 || >=24.0.0', así que '20.x' debería ser suficiente.
          cache: 'npm' # Usa 'npm' para caché de dependencias. Si usas yarn, cámbialo a 'yarn'.

      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          # Utilizando las variables de entorno definidas arriba
          app_location: ${{ env.APP_LOCATION }}
          api_location: ${{ env.API_LOCATION }}
          app_artifact_location: ${{ env.APP_ARTIFACT_LOCATION }}
          # No es necesario especificar app_build_command y api_build_command
          # porque Oryx es inteligente y detecta el tipo de proyecto y sus comandos de build estándar.
          # Si Oryx tiene problemas, puedes descomentar y especificar algo como:
          # app_build_command: "npm install && npm run build"
          # api_build_command: "npm install" # Si tu API es Node.js/Functions
          ###### End of Repository/Build Configurations ######

  close_pull_request_job:
    permissions:
      contents: none
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "close"
